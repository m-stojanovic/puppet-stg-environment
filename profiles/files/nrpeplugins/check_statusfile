#! /usr/bin/python

# Relay the status of a check that was previously run and which stored
# its result in a file to nagios.
#
# Copyright 2008, 2012 Peter Palfrader
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import optparse
import os
import re
import sys
import time

NAGIOS_STATUS = { "OK": 0, "WARNING": 1, "CRITICAL": 2, "UNKNOWN": 3 }
UNITS_TO_SECONDS = { 's': 1, 'm': 60, 'h': 60*60, 'd': 24*60*60 }

parser = optparse.OptionParser()
parser.set_usage("%prog [options] <statusfile>")
parser.add_option("-a", "--age", dest="age", metavar="AGE",
    type="string", default="26h",
    help="maximum age, in seconds (or use Nm, Nh or Nd) - default is 26h.")
(options, args) = parser.parse_args()

if len(args) != 1:
    parser.print_help(file=sys.stderr)
    sys.exit(1)

statusfile = args[0]

# find out what the max age is that we accept
m = re.match('([0-9]+)([smhd])?$', options.age)
if not m:
    print >> sys.stderr, "Invalid age %s"%(options.age)
    parser.print_help(file=sys.stderr)
    sys.exit(1)
(count, unit) = m.groups()
if unit is None: unit = 's'
max_age = int(count) * UNITS_TO_SECONDS[unit]

# let's see if it exists
if not os.path.exists(statusfile):
    print "UNKNOWN: %s does not exist."%(statusfile)
    sys.exit(NAGIOS_STATUS['UNKNOWN'])


mtime = os.path.getmtime(statusfile)
if mtime + max_age < time.time():
    print "WARNING: %s is old: %.1f hours."%(statusfile, (time.time() - mtime)/3600)
    sys.exit(NAGIOS_STATUS['WARNING'])

status = open(statusfile, "r")
returnvalue = status.readline().strip()

if not returnvalue in NAGIOS_STATUS:
    print "UNKNOWN: %s has invalid return value: %s."%(statusfile, returnvalue)
    sys.exit(NAGIOS_STATUS['UNKNOWN'])

linecnt = 0
for line in status:
    print line,
    linecnt += 1

if linecnt == 0:
    print "Found no output.  Something is probably wrong"
    sys.exit(NAGIOS_STATUS['UNKNOWN'])

sys.exit(NAGIOS_STATUS[returnvalue])

# vim:set et:
# vim:set ts=4:
# vim:set shiftwidth=4:
